// JavaChatClientMain.java
// Java Client 시작import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JFrame;
import java.awt.event.*;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import com.sun.tools.javac.Main;
/*
import JavaGameClientView.ImageSendAction;
import JavaGameClientView.ListenNetwork;
import JavaGameClientView.MyMouseEvent;
import JavaGameClientView.MyMouseWheelEvent;
import JavaGameClientView.TextSendAction;*/

import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.ImageIcon;
import javax.swing.JButton;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.awt.*;
import javax.swing.Icon;
import javax.swing.JTextArea;
public class ChatFriendList extends JFrame {
   ArrayList userNameList = new ArrayList();

   private JPanel contentPane;
   private JTextField txtIpAddress;
   private JTextField txtPortNumber;

   /**
    * Launch the application.
    */
   private static final long serialVersionUID = 1L;
   
   
   private String UserName;
   private JButton btnSend;
   private static final int BUF_LEN = 128; // Windows 처럼 BUF_LEN 을 정의
   private Socket socket; // 연결소켓
   private InputStream is;
   private OutputStream os;
   private DataInputStream dis;
   private DataOutputStream dos;

   private ObjectInputStream ois;
   private ObjectOutputStream oos;

   private JLabel lblUserName;
   // private JTextArea textArea;
   private JTextPane textArea;

   private Frame frame;
   private FileDialog fd;
   private JButton imgBtn;

   JPanel panel;
   private JLabel lblMouseEvent;
   private Graphics gc;
   private int pen_size = 2; // minimum 2
   // 그려진 Image를 보관하는 용도, paint() 함수에서 이용한다.
   private Image panelImage = null; 
   private Graphics gc2 = null;
   
   private JLabel userListLabel;
  
   /**
    * Create the frame.
    */
   public ChatFriendList(String username, String ip_addr, String port_no) {
     this.UserName = username;
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setSize(400,600);
      setBounds(100, 100, 386, 512);
      contentPane = new JPanel();
      contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
      setContentPane(contentPane);
      contentPane.setLayout(null);
      
      JPanel contentPane_1 = new JPanel();
      contentPane_1.setBackground(Color.WHITE);
      contentPane_1.setLayout(null);
      contentPane_1.setBorder(new EmptyBorder(5, 5, 5, 5));
      contentPane_1.setBounds(61, 0, 311, 485);
      contentPane.add(contentPane_1);
      
      JLabel FriendLabel = new JLabel("\uCE5C\uAD6C");
      FriendLabel.setFont(new Font("굴림", Font.BOLD, 18));
      FriendLabel.setBounds(23, 23, 76, 34);
      contentPane_1.add(FriendLabel);
      
      JLabel userNameLabel = new JLabel(username);
      userNameLabel.setFont(new Font("굴림", Font.BOLD, 14));
      userNameLabel.setBounds(77, 75, 68, 15);
      contentPane_1.add(userNameLabel);
      
      JPanel userImgPanel = new JPanel();
      userImgPanel.setBackground(Color.WHITE);
      userImgPanel.setBounds(23, 66, 42, 42);
      contentPane_1.add(userImgPanel);
//      MyPanel panel = new MyPanel("src/icon1.jpg");
//      contentPane_1.add(panel);
      ImageIcon icon = new ImageIcon("src/basicProfileImg.jpg");
      Image img = icon.getImage();
      Image changeImg = img.getScaledInstance(41,41, Image.SCALE_SMOOTH);
      ImageIcon changeIcon = new ImageIcon(changeImg);
      JLabel label1 = new JLabel(changeIcon);
      JLabel label2 = new JLabel(changeIcon);
      userImgPanel.add(label1);
      
      JPanel friendImgPanel = new JPanel();
      friendImgPanel.setBackground(Color.WHITE);
      friendImgPanel.setBounds(23, 119, 42, 42);
     
      ImageIcon friendIcon = new ImageIcon("src/basicProfileImg.jpg");
      JLabel friendIconlabel = new JLabel(friendIcon);
      friendImgPanel.add(friendIconlabel);
      
      contentPane_1.add(friendImgPanel);
      
   
     
      
      JLabel friendNameLabel = new JLabel("<dynamic>");
      friendNameLabel.setFont(new Font("굴림", Font.BOLD, 14));
      friendNameLabel.setBounds(77, 134, 68, 15);
      contentPane_1.add(friendNameLabel);
      
      JPanel friendIconPanel = new JPanel();
      friendIconPanel.setBounds(12, 47, 40, 40);
      contentPane.add(friendIconPanel);
      
      ImageIcon menuIcon1 = new ImageIcon("src/menuIcon1.png");
      JLabel MenuIconlabel = new JLabel(menuIcon1);
      friendIconPanel.add(MenuIconlabel);
      
      
      JPanel chatIconPanel = new JPanel();
      chatIconPanel.setBounds(12, 119, 40, 40);
      contentPane.add(chatIconPanel);
      
      ImageIcon menuIcon2 = new ImageIcon("src/menuIcon2.png");
      
      JPanel chatPanel = new JPanel();//채팅창 현재는 setvisible(false);
      chatPanel.setBounds(61, 0, 311, 485);
      chatPanel.setVisible(false);
      chatPanel.setBackground(Color.WHITE);
      chatPanel.setLayout(null);
      
      class ChatAction implements MouseListener // 내부클래스로 액션 이벤트 처리 클래스
      {
         @Override
         public void mouseClicked(MouseEvent e) {
        	 contentPane_1.setVisible(false);
        	 chatPanel.setVisible(true);
        	 JLabel dd = new JLabel("dd?????");
        	 dd.setSize(50,50);
        	 dd.setLocation(150,150);
        	 chatPanel.add(dd);
           }
       @Override
          public void mouseExited(MouseEvent e){

       } 
       @Override
       public void mouseReleased(MouseEvent e){

       } 
       @Override
       public void mousePressed(MouseEvent e ) {
          
       }

      @Override
      public void mouseEntered(MouseEvent e) {
         // TODO Auto-generated method stub
         
      }
      }
      ChatAction chatIconeve = new ChatAction();
      JLabel chatIconLabel = new JLabel(menuIcon2);
      chatIconPanel.add(chatIconLabel);
      chatIconPanel.addMouseListener(chatIconeve);//이 아이콘 누르면 채팅창 뜨도록
      
     
      //txtIpAddress.addActionListener(action);
      //txtPortNumber.addActionListener(action);


      try {
         socket = new Socket(ip_addr, Integer.parseInt(port_no));

         oos = new ObjectOutputStream(socket.getOutputStream());
         oos.flush();
         ois = new ObjectInputStream(socket.getInputStream());

         ChatMsg obcm = new ChatMsg(UserName, "100", "Hello");//connect
         //현재 입장한 유저는 ㅇㅇㅇ 입니다.
         SendObject(obcm);//send
         EnterUserNetwork net = new EnterUserNetwork();
         net.start();
      


      } catch (NumberFormatException | IOException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
         //AppendText("connect error");
      }
      
      
      
      class MyAction implements MouseListener // 내부클래스로 액션 이벤트 처리 클래스
      {
         @Override
         public void mouseClicked(MouseEvent e) {
           
            ChatRoom chatrom = new ChatRoom(username, ip_addr, port_no, socket); 
            chatrom.setVisible(true);
         }
       @Override
          public void mouseExited(MouseEvent e){

       } 
       @Override
       public void mouseReleased(MouseEvent e){

       } 
       @Override
       public void mousePressed(MouseEvent e ) {
          
       }

      @Override
      public void mouseEntered(MouseEvent e) {
         // TODO Auto-generated method stub
         
      }
      }
      
      MyAction my = new MyAction();
      friendImgPanel.addMouseListener(my);
      JLabel label_1 = new JLabel((Icon) null);
      friendImgPanel.add(label_1);
      
      userListLabel = new JLabel("");
      userListLabel.setBounds(66, 280, 178, 148);
      contentPane_1.add(userListLabel);
      
      
      
     
   }
   class EnterUserNetwork extends Thread {
      public void run() {
         while (true) {
            try {

               Object obcm = null;
               String msg = null;
               ChatMsg cm;
               try {
                  obcm = ois.readObject();
               } catch (ClassNotFoundException e) {
                  // TODO Auto-generated catch block
                  e.printStackTrace();
                  break;
               }
               if (obcm == null)
                  break;
               if (obcm instanceof ChatMsg) {
                  cm = (ChatMsg) obcm;
                  msg = String.format("[%s]\n%s", cm.UserName, cm.data);
               } else
                  continue;
               switch (cm.code) {
                     case "100":
                    
                        // 유저배열에 새로 들어온 유저를 추가함
                        userNameList.add(cm.UserName);
                        String str = String.join(",", userNameList);
                         userListLabel.setText(str);
                         
                        // obcm = new ChatMsg(UserName, "101", str); // 유저 리스트를 보냄 
                           
                          // SendObject(obcm);//send
                         
                     case "101": // 유저 리스트 받았다면
                        userListLabel.setText(cm.data);
                        
                        
                        
                  
            /*case "200": // chat message
               if (cm.UserName.equals(UserName))
                  //AppendTextR(msg); // 내 메세지는 우측에
               else
                  //AppendText(msg);
               break;
            case "300": // Image 첨부
               if (cm.UserName.equals(UserName))
                  //AppendTextR("[" + cm.UserName + "]");
               else
                  //AppendText("[" + cm.UserName + "]");
               //AppendImage(cm.img);
               break;
            case "500": // Mouse Event 수신
               //DoMouseEvent(cm);
               break;
               */
            }
            } catch (IOException e) {
               AppendText("ois.readObject() error");
               try {
//                  dos.close();
//                  dis.close();
                  ois.close();
                  oos.close();
                  socket.close();

                  break;
               } catch (Exception ee) {
                  break;
               } // catch문 끝
            } // 바깥 catch문끝

         }
      }
   }
   public void AppendText(String msg) {
      // textArea.append(msg + "\n");
      // AppendIcon(icon1);
      msg = msg.trim(); // 앞뒤 blank와 \n을 제거한다.
      int len = textArea.getDocument().getLength();
      // 끝으로 이동
      //textArea.setCaretPosition(len);
      //textArea.replaceSelection(msg + "\n");
      
      StyledDocument doc = textArea.getStyledDocument();
      SimpleAttributeSet left = new SimpleAttributeSet();
      StyleConstants.setAlignment(left, StyleConstants.ALIGN_LEFT);
      StyleConstants.setForeground(left, Color.BLACK);
       doc.setParagraphAttributes(doc.getLength(), 1, left, false);
      try {
         doc.insertString(doc.getLength(), msg+"\n", left );
      } catch (BadLocationException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }

   }
   
   public void SendObject(Object ob) { // 서버로 메세지를 보내는 메소드
      try {
         oos.writeObject(ob);
      } catch (IOException e) {
         // textArea.append("메세지 송신 에러!!\n");
         AppendText("SendObject Error");
      }
   }
}

//class MyMouse implements MouseListener{
//   @Override
//   public void mouseClicked(MouseEvent e) {
//      (Window) e.setVisible(false);
//   }
//   @Override
//      public void mouseExited(MouseEvent e){
//
//   } 
//   @Override
//   public void mouseReleased(MouseEvent e){
//
//   } 
//   @Override
//   public void mousePressed(MouseEvent e ) {
//      
//   }
//
//}